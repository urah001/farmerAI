import { NextResponse } from "next/server"
import { generateObject } from "ai"
import { openai } from "@ai-sdk/openai"
import { z } from "zod"

// Define the schema for disease detection results to avoid any injection of unfavorable code 
const diseaseDetectionSchema = z.object({
  disease: z.string(),
  confidence: z.number(),
  description: z.string(),
  symptoms: z.array(z.string()),
  causes: z.array(z.string()),
  treatment: z.object({
    chemical: z.array(z.string()),
    biological: z.array(z.string()),
    cultural: z.array(z.string()),
  }),
  preventionMeasures: z.array(z.string()),
  severity: z.enum(["Low", "Medium", "High"]),
  spreadRisk: z.enum(["Low", "Medium", "High"]),
})

export async function POST(req: Request) {
  try {
    const formData = await req.formData()
    const image = formData.get("image") as File
    const cropType = formData.get("cropType") as string

    if (!image) {
      return NextResponse.json({ error: "No image provided" }, { status: 400 })
    }

    // In a real implementationthis are the step we would use:
    // 1. Process the image using a CNN model
    // 2. Identify the disease
    // 3. Generate a detailed report

    // For this demo, we'll simulate the AI analysis
    const { object } = await generateObject({
      model: openai("gpt-4o"),
      schema: diseaseDetectionSchema,
      prompt: `
        Generate a detailed plant disease diagnosis report for a ${cropType} plant.
        The report should include the disease name, confidence score, description, symptoms,
        causes, treatment options (chemical, biological, and cultural), prevention measures,
        severity level, and risk of spread to other plants.
        
        Make the response realistic as if it were generated by a computer vision model
        that analyzed an image of an infected plant.
      `,
    })

    return NextResponse.json(object)
  } catch (error) {
    console.error("Error in disease detection:", error)
    return NextResponse.json({ error: "Failed to process disease detection" }, { status: 500 })
  }
}
