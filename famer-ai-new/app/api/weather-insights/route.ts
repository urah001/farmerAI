import { NextResponse } from "next/server"
import { generateObject } from "ai"
import { openai } from "@ai-sdk/openai"
import { z } from "zod"

// Define the schema for weather insights
const weatherInsightsSchema = z.object({
  currentConditions: z.object({
    temperature: z.number(),
    humidity: z.number(),
    windSpeed: z.number(),
    precipitation: z.number(),
    condition: z.string(),
  }),
  forecast: z.array(
    z.object({
      day: z.string(),
      condition: z.string(),
      highTemp: z.number(),
      lowTemp: z.number(),
      precipitation: z.number(),
    }),
  ),
  farmingRecommendations: z.array(
    z.object({
      category: z.enum(["Irrigation", "Planting", "Harvesting", "Pest Control"]),
      recommendation: z.string(),
      priority: z.enum(["Low", "Medium", "High"]),
    }),
  ),
  alerts: z
    .array(
      z.object({
        type: z.string(),
        severity: z.enum(["Low", "Moderate", "High", "Severe"]),
        description: z.string(),
        startTime: z.string(),
        endTime: z.string(),
      }),
    )
    .optional(),
})

export async function GET(req: Request) {
  try {
    const { searchParams } = new URL(req.url)
    const location = searchParams.get("location") || "Default Farm Location"
    const cropTypes = searchParams.get("crops") || "mixed crops"

    // In a real implementation, we would:
    // 1. Fetch actual weather data from a weather API
    // 2. Process it with AI to generate farming recommendations
    // 3. Return the combined insights

    // For this demo, we'll simulate the weather insights
    const { object } = await generateObject({
      model: openai("gpt-4o"),
      schema: weatherInsightsSchema,
      prompt: `
        Generate realistic weather insights for a farm in ${location} growing ${cropTypes}.
        Include current conditions, a 5-day forecast, and farming recommendations based on the weather.
        Also include any relevant weather alerts if applicable.
        
        Make the response realistic as if it were generated by processing actual weather data
        and applying agricultural knowledge to provide actionable insights for farmers.
      `,
    })

    return NextResponse.json(object)
  } catch (error) {
    console.error("Error generating weather insights:", error)
    return NextResponse.json({ error: "Failed to generate weather insights" }, { status: 500 })
  }
}
